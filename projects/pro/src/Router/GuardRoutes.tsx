// ‚úÖ src/Router/GuardRoutes.tsx ‚Äî Route Guard ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£ login (Authentication)

import { Navigate, useLocation } from "react-router-dom";
import { ReactNode } from "react";

// üìå ‡∏™‡∏°‡∏°‡∏∏‡∏ï‡∏¥‡∏ß‡πà‡∏≤ auth ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å context ‡∏´‡∏£‡∏∑‡∏≠ state ‡∏à‡∏£‡∏¥‡∏á ‡πÜ ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
const isAuthenticated = (): boolean => {
  const token = localStorage.getItem("token"); // ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏ä‡πá‡∏Ñ‡∏à‡∏≤‡∏Å context/store
  return !!token;
};

interface GuardRoutesProps {
  children: ReactNode;
}

/**
 * ‚úÖ GuardRoutes
 * - ‡πÉ‡∏ä‡πâ‡∏Ñ‡∏£‡∏≠‡∏ö `<Route>` ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á route ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á login ‡∏Å‡πà‡∏≠‡∏ô
 * - ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà login ‡∏à‡∏∞ redirect ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ login
 */
const GuardRoutes = ({ children }: GuardRoutesProps) => {
  const location = useLocation();

  if (!isAuthenticated()) {
    return <Navigate to="/login" state={{ from: location }} replace />;
  }

  return <>{children}</>;
};

export default GuardRoutes;