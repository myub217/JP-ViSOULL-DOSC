// ‚úÖ src/Home/common/ErrorBoundary.tsx ‚Äî React Error Boundary ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö JP Visual & Docs

import React, { Component, ReactNode, ErrorInfo } from "react";

interface ErrorBoundaryProps {
  children: ReactNode;
}

interface ErrorBoundaryState {
  hasError: boolean;
  error?: Error;
}

/**
 * üß± ErrorBoundary
 *
 * - ‡∏à‡∏±‡∏ö error runtime ‡∏Ç‡∏≠‡∏á component tree ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
 * - ‡πÅ‡∏™‡∏î‡∏á fallback UI ‡πÅ‡∏ó‡∏ô component ‡∏ó‡∏µ‡πà‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß
 * - ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö Production ‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏≤‡∏£ debug
 */
class ErrorBoundary extends Component<ErrorBoundaryProps, ErrorBoundaryState> {
  constructor(props: ErrorBoundaryProps) {
    super(props);
    this.state = { hasError: false, error: undefined };
  }

  static getDerivedStateFromError(error: Error): ErrorBoundaryState {
    return { hasError: true, error };
  }

  componentDidCatch(error: Error, errorInfo: ErrorInfo) {
    // üîß ‡∏™‡πà‡∏á log error ‡πÑ‡∏õ‡∏¢‡∏±‡∏á monitoring service (‡πÄ‡∏ä‡πà‡∏ô Sentry) ‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
    console.error("üí• Uncaught error:", error, errorInfo);
  }

  render() {
    const { hasError, error } = this.state;

    if (hasError) {
      return (
        <div className="flex min-h-screen flex-col items-center justify-center bg-base-100 text-base-content p-4 text-center">
          <h1 className="text-2xl sm:text-3xl font-bold mb-3">‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ö‡∏≤‡∏á‡∏≠‡∏¢‡πà‡∏≤‡∏á</h1>
          <p className="mb-4 text-sm text-base-content/70">
            ‡∏Ç‡∏≠‡πÇ‡∏ó‡∏©‡πÉ‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏∞‡∏î‡∏ß‡∏Å ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏µ‡πÄ‡∏ü‡∏£‡∏ä‡∏´‡∏ô‡πâ‡∏≤‡πÉ‡∏´‡∏°‡πà ‡∏´‡∏£‡∏∑‡∏≠‡∏•‡∏≠‡∏á‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á
          </p>
          {error?.message && (
            <pre className="whitespace-pre-wrap bg-base-200 p-4 rounded-lg text-sm text-error max-w-md mx-auto">
              {error.message}
            </pre>
          )}
        </div>
      );
    }

    return this.props.children;
  }
}

export default ErrorBoundary;
